syntax = "proto3";

package EcdarProtoBuf;

option java_multiple_files = false;
option java_package = "EcdarProtoBuf";
option java_outer_classname = "ObjectProtos";

import "component.proto";

message SpecificComponent {
  string component_name = 1;
  uint32 component_index = 2;
}

message Clock {
  message ComponentClock {
    SpecificComponent specific_component = 1;
    string clock_name = 2;
  }
  message SystemClock {
    uint32 clock_index = 1;
  }
  message Zero {}
  oneof clock {
    // When a clock is attached to a component
    ComponentClock component_clock = 1;
    // When a clock is not attached to a component
    SystemClock system_clock = 2;
    // The zero clock
    Zero zero = 3;
  }
}


message Constraint {
  // This message represents if (strict) { x - y < c } else { x - y <= c }
  Clock x = 1;
  Clock y = 2;
  bool strict = 3;
  int32 c = 4;
}

message Conjunction {
  repeated Constraint constraints = 1;
}

message Disjunction {
  repeated Conjunction conjunctions = 1;
}

message Federation {
  Disjunction disjunction = 1;
}


// Should only be used when quotient adds new locations to the tree
enum SpecialLocation {
  UNIVERSAL = 0;
  ERROR = 1;
}

// A specific location in a specific component
message LeafLocation {
  string id = 1;
  SpecificComponent specific_component = 2;
}

// A combination/pair of locations
message BranchLocation {
  LocationTree left = 1;
  LocationTree right = 2;
  // Could include composition type too? (e.g. Conjunction, Composition, Quotient, Refinement)
}

// A binary tree describing a location in a system. It has to be a tree to support the special locations from quotients
message LocationTree {
  oneof node_type {
    LeafLocation leaf_location = 1;
    BranchLocation branch_location = 2;
    SpecialLocation special_location = 3;
  }
}

message State {
  LocationTree location_tuple = 1;
  Federation federation = 2;
}

message Edge {
  string id = 1;
  SpecificComponent specific_component = 2;
}

message Decision {
  // Only one transition should be possible for the given state and action
  State source = 1;
  string action = 2;
  // Only for GUI purposes
  repeated Edge edges = 3;
  // The state that is reached if this decision is taken. Only for GUI purposes.  
  State destination = 4;
}

message Path {
  repeated Decision decisions = 1;
}